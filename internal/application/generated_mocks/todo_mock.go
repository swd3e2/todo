// Code generated by MockGen. DO NOT EDIT.
// Source: todo.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	application "github.com/swd3e2/todo/internal/application"
)

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// FindByUserId mocks base method.
func (m *MockTodoRepository) FindByUserId(id int) *application.Todo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", id)
	ret0, _ := ret[0].(*application.Todo)
	return ret0
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockTodoRepositoryMockRecorder) FindByUserId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockTodoRepository)(nil).FindByUserId), id)
}
